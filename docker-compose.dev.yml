version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: chainforge-backend-dev
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - PORT=8080
      - HOST=0.0.0.0
      - DATABASE_URL=/app/data/chainforge.db
      - DB_ENCRYPTION_KEY=dev-encryption-key-32-characters
      - JWT_SECRET=dev-jwt-secret-key-for-development-only
      - REFRESH_SECRET=dev-refresh-secret-key-for-development-only
      - ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000,http://0.0.0.0:5173
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
    volumes:
      - ./backend:/app
      - chainforge-backend-data:/app/data
      - chainforge-backend-uploads:/app/static/uploads
    networks:
      - chainforge-network
    restart: unless-stopped
    depends_on:
      - database

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: chainforge-frontend-dev
    ports:
      - "5173:5173"
      - "5174:5174" # HMR port
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
      - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
    volumes:
      - ./frontend:/app
      - chainforge-frontend-modules:/app/node_modules
    networks:
      - chainforge-network
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Database service (SQLite is file-based, but we can use a volume mount)
  database:
    image: alpine:3.19
    container_name: chainforge-database-dev
    volumes:
      - chainforge-backend-data:/data
    networks:
      - chainforge-network
    command: ["sh", "-c", "while true; do sleep 3600; done"]
    restart: unless-stopped

  # Nginx reverse proxy for development (optional)
  nginx:
    image: nginx:alpine
    container_name: chainforge-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf
    networks:
      - chainforge-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

# Volumes for persistent data
volumes:
  chainforge-backend-data:
    driver: local
  chainforge-backend-uploads:
    driver: local
  chainforge-frontend-modules:
    driver: local

# Network for service communication
networks:
  chainforge-network:
    driver: bridge